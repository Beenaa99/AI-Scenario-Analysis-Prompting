// ScenarioAnalysisControllerTest.java
package com.example.analyzer.controller;

import com.example.analyzer.model.ScenarioAnalysisRequest;
import com.example.analyzer.model.ScenarioAnalysisResponse;
import com.example.analyzer.service.AiService;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;

import java.util.Arrays;
import java.util.List;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertNotNull;
import static org.mockito.ArgumentMatchers.any;
import static org.mockito.Mockito.when;

public class ScenarioAnalysisControllerTest {

    @Mock
    private AiService aiService;

    @InjectMocks
    private ScenarioAnalysisController controller;

    @BeforeEach
    public void setup() {
        MockitoAnnotations.openMocks(this);
    }

    @Test
    public void testAnalyzeScenario() {
        // Arrange
        ScenarioAnalysisRequest request = new ScenarioAnalysisRequest();
        request.setScenario("Our team has a new client project with a tight deadline and limited budget.");
        request.setConstraints(Arrays.asList("Budget: $10,000", "Deadline: 6 weeks", "Team of 3 developers"));

        ScenarioAnalysisResponse mockResponse = new ScenarioAnalysisResponse();
        mockResponse.setScenarioSummary("A small team must deliver a client project within 6 weeks on a $10,000 budget.");
        mockResponse.setPotentialPitfalls(Arrays.asList(
                "Scope creep due to unclear requirements",
                "Underestimation of resource constraints",
                "Risk of burnout with limited manpower"
        ));
        mockResponse.setProposedStrategies(Arrays.asList(
                "Define clear milestones and requirements early",
                "Implement lean project management principles",
                "Conduct weekly check-ins to monitor progress"
        ));
        mockResponse.setRecommendedResources(Arrays.asList(
                "Trello or Jira for agile task management",
                "Open-source libraries to reduce cost",
                "Online tutorials for rapid skill upskilling"
        ));
        mockResponse.setDisclaimer("These suggestions are generated by AI; consult subject matter experts for tailored guidance.");

        when(aiService.generateAnalysis(any(ScenarioAnalysisRequest.class))).thenReturn(mockResponse);

        // Act
        ResponseEntity<ScenarioAnalysisResponse> responseEntity = controller.analyzeScenario(request);

        // Assert
        assertEquals(HttpStatus.OK, responseEntity.getStatusCode());
        assertNotNull(responseEntity.getBody());
        assertEquals(mockResponse.getScenarioSummary(), responseEntity.getBody().getScenarioSummary());
        assertEquals(mockResponse.getPotentialPitfalls().size(), responseEntity.getBody().getPotentialPitfalls().size());
        assertEquals(mockResponse.getProposedStrategies().size(), responseEntity.getBody().getProposedStrategies().size());
        assertEquals(mockResponse.getRecommendedResources().size(), responseEntity.getBody().getRecommendedResources().size());
        assertEquals(mockResponse.getDisclaimer(), responseEntity.getBody().getDisclaimer());
    }

    @Test
    public void testEmptyScenario() {
        // Arrange
        ScenarioAnalysisRequest request = new ScenarioAnalysisRequest();
        request.setScenario("");
        request.setConstraints(Arrays.asList("Budget: $10,000"));

        ScenarioAnalysisResponse mockResponse = new ScenarioAnalysisResponse();
        mockResponse.setScenarioSummary("Empty scenario provided.");
        mockResponse.setPotentialPitfalls(Arrays.asList("Cannot analyze without scenario details"));
        mockResponse.setProposedStrategies(Arrays.asList("Please provide a detailed scenario"));
        mockResponse.setRecommendedResources(Arrays.asList("N/A"));
        mockResponse.setDisclaimer("AI analysis requires sufficient context to provide meaningful insights.");

        when(aiService.generateAnalysis(any(ScenarioAnalysisRequest.class))).thenReturn(mockResponse);

        // Act
        ResponseEntity<ScenarioAnalysisResponse> responseEntity = controller.analyzeScenario(request);

        // Assert
        assertEquals(HttpStatus.OK, responseEntity.getStatusCode());
        assertNotNull(responseEntity.getBody());
        assertEquals("Empty scenario provided.", responseEntity.getBody().getScenarioSummary());
    }
}